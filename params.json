{"name":"Awesome-competitive-coding","tagline":"A Curated list of Topic wise Theory and Questions to Get You Started On Competitive Coding.","body":"# Awesome Competitive Coding [![Awesome](https://cdn.rawgit.com/sindresorhus/awesome/d7305f38d29fed78fa85652e3a63e154dd8e8829/media/badge.svg)](https://github.com/sindresorhus/awesome)\r\n\r\nA Curated list of Topic wise Theory and Questions to Get You Started On Competitive Coding.\r\n\r\n*Inspired by the [awesome](https://github.com/sindresorhus/awesome) list thing. You might also like to read complete [awesome-list](https://github.com/sindresorhus/awesome).*\r\n\r\n### Contributing\r\nKindly Go Through [Contribution Guidelines](https://github.com/hkirat/awesome-competitive-coding/blob/master/CONTRIBUTING.md) First.\r\n\r\nTopics\r\n---\r\n - [Binary and Ternary Search](#binary-and-ternary-search)\r\n - [Dynamic Programming](#dynamic-programming)\r\n - [Flow](#flow)\r\n - [Game Theory](#game-theory)\r\n - [Graphs](#graphs)\r\n - [Greedy](#greedy)\r\n - [Maths](#maths)\r\n - [Matrix Exponentiation](#matrix-exponentiation)\r\n - [Miscellaneous](#miscellaneous)\r\n - [Prefix and Suffix Trees](#prefix-and-suffix-trees)\r\n - [Segment Trees](#segment-trees)\r\n - [Trees](#trees)\r\n\r\n## Binary and Ternary Search\r\n---\r\n*Binary Search : The process of exploiting the property of an array of being sorted to arrive at answers of questions in non linear time.*\r\n\r\n*Ternary Search : The process of exploiting the property of a function having double diffrential of a constant sign to arrive to results in non linear time.*\r\n\r\n - Theory\r\n\r\n \t- [Hackerearth](https://www.hackerearth.com/notes/power-of-binary-search/) - Power of Binary search by [Aman Goel](https://www.hackerearth.com/users/amangoel.vsec/) (Easy).\r\n \t- [Topcoder](https://www.topcoder.com/community/data-science/data-science-tutorials/binary-search/) - Binary Search by [lovro](https://www.topcoder.com/member-profile/lovro/) (Hard).\r\n \t- [Ternary Search](http://rendon.x10.mx/ternary-search/) - Blog Post on Ternary Search.\r\n\r\n - Questions on\r\n\r\n \t- [Codeforces](http://codeforces.com/problemset/tags/binary%20search)\r\n \t- [A2oj](http://a2oj.com/Category.jsp?ID=40)\r\n \t- [Codechef](https://discuss.codechef.com/tags/binarysearch/)\r\n\r\n## Dynamic Programming\r\n---\r\n*Used to solve questions which can be broken down into smaller sub problems.It involves the technique of saving the result of a problem for future reference.*\r\n\r\n - Theory\r\n\r\n \t- [Topcoder](https://www.topcoder.com/community/data-science/data-science-tutorials/dynamic-programming-from-novice-to-advanced/) - Dynamic Programming from Novice to Advanced.\r\n \t- [Codechef](https://www.codechef.com/wiki/tutorial-dynamic-programming) - Tutorial on Dynamic Programming.\r\n\r\n - Questions on\r\n\r\n \t- [Hackerrank](https://www.hackerrank.com/domains/algorithms/dynamic-programming)\r\n \t- [spoj](http://problemclassifier.appspot.com/?keywords=dp)\r\n \t- [More Problems on SPOJ](http://apps.topcoder.com/forums/;jsessionid=C684F032169B7439C8012AAB6BA2018C?module=Thread&threadID=674592)\r\n \t- [A2oj](http://a2oj.com/Category.jsp?ID=33)\r\n \t- [Codeforces](http://codeforces.com/problemset/tags/dp)\r\n\r\n## Flow\r\n---\r\n\r\n - Theory\r\n\r\n \t- [Topcoder - Max Flow Part 1](https://www.topcoder.com/community/data-science/data-science-tutorials/maximum-flow-section-1/)\r\n \t- [Topcoder - Max Flow Part 2](https://www.topcoder.com/community/data-science/data-science-tutorials/maximum-flow-section-2/)\r\n\r\n - Questions\r\n\r\n \t- [spoj](http://problemclassifier.appspot.com/?keywords=flow)\r\n \t- [A2oj](http://a2oj.com/Category.jsp?ID=12)\r\n\r\n## Game Theory\r\n---\r\n*Used to solve problems involving mathematical modelling of conflict and cooperation among rational players.*\r\n\r\n - Theory\r\n\t- [Stanford](http://web.stanford.edu/class/cs97si/05-combinatorial-games.pdf) - PDF on Combinatorial Games.\r\n\t- [Wikipedia](https://en.wikipedia.org/wiki/Nim) - Introduction to Nim Games.\r\n\t- [Book](http://www.cs.ox.ac.uk/files/2735/Composite_games.pdf) - Composite Mathematical Games.\r\n\t- [Book](http://www.math.ucla.edu/~tom/Game_Theory/comb.pdf) - Game Theory By Thomas S. Ferguson.\r\n\t- [Wikipedia](https://en.wikipedia.org/wiki/Sprague%E2%80%93Grundy_theorem) - Sprague Grundy Theorem.\r\n\t- [Topcoder](https://www.topcoder.com/community/data-science/data-science-tutorials/algorithm-games/) - Introduction to Algorithmic Games.\r\n\r\n - Questions on \r\n\t- [A2oj](http://a2oj.com/Category.jsp?ID=91)\r\n\r\n## Graphs\r\n---\r\n*A graph consists of nodes and the interconnection between them.The problems involve finding shortest distance, connectivity and flow.*\t\r\n\r\n - Theory\r\n\r\n \t- [Topcoder](https://topcoder.com)\r\n \t\t- [Identifying a graph on Topcoder](https://www.topcoder.com/community/data-science/data-science-tutorials/introduction-to-graphs-and-their-data-structures-section-1/)\r\n \t\t- [Searching in a Graph](https://www.topcoder.com/community/data-science/data-science-tutorials/introduction-to-graphs-and-their-data-structures-section-2/)\r\n \t\t- [Path Algorithms](https://www.topcoder.com/community/data-science/data-science-tutorials/introduction-to-graphs-and-their-data-structures-section-3/)\r\n \t- [Codeforces](http://codeforces.com/blog/entry/16221) - Important Graph Algorithms by [PrinceOfPersia](http://codeforces.com/profile/PrinceOfPersia)\r\n \t- [Codechef](https://www.codechef.com/wiki/tutorial-graph-theory-part-1) - Tutorial on Graph Theory - part 1\r\n\r\n - Questions on\r\n\r\n \t- [Codeforces](http://codeforces.com/problemset/tags/graphs)\r\n \t- [Codechef](https://discuss.codechef.com/tags/graph/)\r\n \t- [A2oj](http://a2oj.com/Category.jsp?ID=13)\r\n\r\n## Greedy\r\n---\r\n*Greedy problems involve solving a problem statement considering the most greedy, i.e. most optimal solution at the given time without taking into consideration the future effects of it.*\r\n\r\n - Theory\r\n\r\n  \t- [Topcoder](https://www.topcoder.com/community/data-science/data-science-tutorials/greedy-is-good/) - Greedy is Good.\r\n  \t- [Stackoverflow.](http://stackoverflow.com/questions/7887487/how-to-spot-a-greedy-algorithm) - Tutorial on how to spot a greedy algorithm.\r\n  \t- [Hackerearth](https://www.hackerearth.com/notes/greedy-algorithm/) - Tutorial on greedy algorithms by [Akash Sharma](https://www.hackerearth.com/users/r3gz3n/).\r\n\r\n - Questions on\r\n\r\n  \t- [Codeforces](http://codeforces.com/problemset/tags/greedy)\r\n  \t- [A2oj](http://a2oj.com/Category.jsp?ID=56)\r\n\r\n## Maths\r\n---\r\n*Problem related to mathematics are quite common in the domain of competitive programming.It involved topics like geometry, algebra, discrete mathematics and probability.*\r\n\r\n - Theory\r\n\r\n \t- [Stanford](http://web.stanford.edu/class/cs97si/02-mathematics.pdf) - Stanford's Guide on Introduction To Competitive Programming.\r\n \t- [Aduni](http://www.aduni.org/courses/discrete/index.php?view=cw) - Course Guide to Discrete Mathematics.\r\n \t- [Topcoder](https://www.topcoder.com/community/data-science/data-science-tutorials/understanding-probabilities/) - Understanding Probability.\r\n\r\n - Questions on \r\n \r\n \t- [A2oj](http://a2oj.com/Category.jsp?ID=86)\r\n \t- [Codechef](https://discuss.codechef.com/tags/simple-math/) - Basic\r\n \t- [Codechef](https://discuss.codechef.com/tags/maths/) - Advanced\r\n\r\n## Matrix Exponentiation\r\n---\r\n*Used to solve problems which involve finding a solution to a given series by using exponentiation property on multiplication of matrices.The complexity is thus reduced to logrithmic from linear.*\r\n\r\n - Theory\r\n\r\n \t- [zobayer](http://zobayer.blogspot.in/2010/11/matrix-exponentiation.html) - Introduction to Matrix exponentiations\r\n \t- [Quora](https://threads-iiith.quora.com/Solving-Dynamic-Programming-with-Matrix-Exponentiation) - Solving Dynamic Programming with Matrix Exponentiation.\r\n\r\n - Questions on\r\n\r\n \t- [A2oj](http://a2oj.com/Category.jsp?ID=32)\r\n\r\n## Miscellaneous\r\n---\r\n\r\n - Mo's Algorithm\r\n \t- [Blog Post By Anudeep Nekkanti](http://blog.anudeep2011.com/mos-algorithm/)\r\n \t- [Hackerearth](https://www.hackerearth.com/notes/mos-algorithm/)\r\n \t- [DQUERY on Spoj](http://www.spoj.com/problems/DQUERY/en/)\r\n \t- [FREQUENT on Spoj](http://www.spoj.com/problems/FREQUENT/)\r\n\r\n - Persistant Segment Trees\r\n \t- [Blog Post By Anudeep Nekkanti](http://blog.anudeep2011.com/persistent-segment-trees-explained-with-spoj-problems/)\r\n \t- [MKTHNUM on Spoj](http://www.spoj.com/problems/MKTHNUM/en/)\r\n\r\n - Mobius Function\r\n \t- [Dance With Mobius Function by Surya Kiran](https://www.quora.com/profile/Surya-Kiran/Posts/A-Dance-with-Mobius-Function)\r\n\r\n - Treaps\r\n \t- [Codeforces](http://codeforces.com/blog/entry/11148)\r\n \t- [Wikipedia](https://en.wikipedia.org/wiki/Treap)\r\n \t- [TREAP on Spoj](http://www.spoj.com/problems/TREAP/)\r\n\r\n - Bit Manipulation\r\n\t- [Hackerearth](https://www.hackerearth.com/notes/bit-manipulation/) - Tutorial on Bit Manipulation by [Prateek Garg](https://www.hackerearth.com/users/ptk23/).\r\n\t- [Hackerrank](https://www.hackerrank.com/domains/algorithms/bit-manipulation) - Questions On Hackerrank on bit manipulation.\r\n\r\n - Other Resources\r\n \t- [Data Structures](http://codeforces.com/blog/entry/15729) - A guide to high level data structures by [PrinceOfPersia](http://codeforces.com/profile/PrinceOfPersia)\r\n\r\n## Prefix and Suffix Trees\r\n---\r\n*Tries are some kind of rooted trees in which each edge has a character on it.*\r\n\r\n - Theory\r\n\r\n \t- [Wikipedia](https://en.wikipedia.org/wiki/Trie) - Introduction to Tries.\r\n \t- [Marknelson](http://marknelson.us/1996/08/01/suffix-trees/) - Tutorial on prefix and suffix trees by Sartaj Sahni\r\n \t- [Marknelson](http://marknelson.us/1996/08/01/suffix-trees/) - Suffix Trees Explained.\r\n\r\n - Questions on\r\n\r\n \t- [Codechef](https://www.codechef.com/problems/TWSTR/)\r\n \t- [Another problem on Codechef](https://www.codechef.com/SEPT13/problems/TMP01)\r\n \t- [A2oj](http://a2oj.com/Category.jsp?ID=49)\r\n\r\n## Segment Trees\r\n---\r\n*Segment tree is a tree for which each node represents an interval.*\r\n\r\n - Theory\r\n\r\n\t- [Hackerearth](https://www.hackerearth.com/notes/segment-trees-for-beginners/) - Segment trees for Beginners by [Ayush Agrawal](https://www.hackerearth.com/users/ayusha1107/).\r\n \t- [Codeforces](http://codeforces.com/blog/entry/15890) - Everything about Segment trees by [PrinceOfPersia](http://codeforces.com/profile/PrinceOfPersia)\r\n\t- [Lazy Propogation](http://se7so.blogspot.in/2012/12/segment-trees-and-lazy-propagation.html) - Solving problems related to updation of segment tree in logrithmic time (also known as lazy propogation).\r\n\r\n - Questions on\r\n\r\n \t- [Codechef](https://discuss.codechef.com/tags/segment-tree/)\r\n \t- [A2oj](http://a2oj.com/Category.jsp?ID=25)\r\n\r\n## Trees\r\n---\r\n*A tree is a data structure made up of nodes or vertices and edges without having any cycle.*\r\n\r\n - Theory\r\n\r\n \t- [Hackerearth](https://www.hackerearth.com/notes/trees/) - Baisc introduction to trees and terminologies related to it by [Anuj Garg](https://www.hackerearth.com/users/anuj09garg/)\r\n \t- [Wikipedia](https://en.wikipedia.org/wiki/Tree_(data_structure)) - Tree (data structure)\r\n\r\n - Questions on\r\n\r\n \t- [Hackerrank](https://www.hackerrank.com/domains/data-structures/trees)\r\n \t- [Codechef](https://discuss.codechef.com/tags/trees/)\r\n \t- [A2oj](http://a2oj.com/Category.jsp?ID=89)\r\n \t- [Codeforces](http://codeforces.com/problemset/tags/trees)\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}